@Controller
@RequestMapping
    from 4.3, following annotation added.
    @GetMapping, @PostMapping, @PutMapping, @DeleteMapping, @PatchMapping
    @GetMapping means GET@RequestMapping, it substitute @RequestMapping in GET situation.
@PathVariable (access URI template variables)
@MatrixVariable
@RequestParam(this means /?id=1)
@RequestBody
    what is request body, request body vs request entity: https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html
    HttpMessageConvert will do the job.
    It can convert from Http request to object(not only String) or from object to Http response body.
    following object supported:
    byte array, String, Map<String, String>, javax.xml.transform.Source.
@ResponseBody
HttpEntity(ResponseEntity)
    Here, they are not annotation
    the entity here can also access request and response headers.
    https://stackoverflow.com/questions/30548822/spring-mvc-4-application-json-content-type-is-not-being-set-correctly
    Note: in above, the RequestMapping#produces() element only to restrict the mapping for your request handlers. It does nothing else.
    this is not correct.
    it matches requests with a Accept type, and affects the actual content type written.

@Controller is to create a Map of model object and find a view.

@RestController simply return the object and object data is directly written into HTTP response as JSON or XML.
This can also be done with traditional @Controller and use @ResponseBody annotation.
but since this is the default behavior of RESTful Web services, Spring introduced @RestController which combined the behavior of @Controller and @ResponseBody together.

@ModelAttribute on a method
without @RequestMapping: it is invoked before @RequestMapping methods, within the same controller.
with @RequestMapping: the return value is interpreted as a model attribute, the view name is derived from view name conventions.

@ModelAttribute on a method arguments
This is known as data binding in Spring MVC.
add BindingResult argument immediately following it.

@SessionAttributes vs @SessionAttribute
@SessionAttributes is type-level annotation.
@SessionAttribute is used to access pre-existing session attributes that are managed globally, i.e. outside the controller(e.g. by a filter),
and may or may not be present.

RedirectAttributes
it can be used for flash attributes.

HttpPutFormContentFilter, can be configured in web.xml.
why we need this.
it is used for Http PUT and PATCH request.

@CookieValue
@RequestHeader

@InitBinder

@RequestAttribute, similar to @SessionAttribute, this annotation can be used to access pre-existing request attributes created by a filter or interceptor.

@ControllerAdvice
it can contain @Exceptionhandler, @InitBinder, @ModelAttribute annotation, and these methods will apply to @RequestMapping methods
across all controller.
@RestControllerAdvice
is an alternative where @ExceptionHandler methods assume @ResponseBody semantics by default.

@JsonView

